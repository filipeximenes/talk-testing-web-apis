OK - Project architecture
    - endpoints.py
    - endpoints_urls.py
    - serializers.py
    - test_endpoints.py
    - test_serializers.py
OK - TDD approach
OK    - what is TDD
OK    - using tests to guide development
OK        - apis don't have interfaces for you to click through *unless you are really doing HATEOAS and using the browsable API
OK        - refreshing pages is boring
- introduction to mocking
    - run test modules individually for quicker result
- Unit testing
    - endpoints
OK        - URL connection to the view
OK        - self.view/self.view_name patterns
OK        - view connection to serializer
            - what if there's different serializer for each method
OK        - simple request to each HTTP method
OK            - returns a list or an object
OK            - returns the correct HTTP status (200, 201)
OK            - POST should include the Location header
    - serializers
        - test serializers
OK            - includes all the desired fields
OK            - test the behaviour of each field separately
            - test validations (required fields)
OK            - never compare the whole structure of the JSON object. This makes tests break unnecessarily for any changes on the serializer and  makes it hard to spot at what field the error occurred (show example)
OK            - test edge cases (numbers, dates, string sizes, sending an float to a decimal, sending a decimal to a float)
            - how to test file fields
            - test serializer method field
            - how to test hypermedia
            - test relationships
    - authentication endpoints
OK    - permissions
        - auth_client pattern
    - pagination
    - filtering
        - test_num_queries
    - integration to external services
         - make sure they are easily mockeable functions)
         - use responses
         - vcrpy (https://github.com/kevin1024/vcrpy) (https://github.com/agriffis/vcrpy-unittest)
    - tools
        - model-mommy
- Functional tests
    - try to consume your API using JS for a real world test
    - Postman (also very util to debug)
    - stress testing
    - Runscope
    - use logs for easy tracing back and debugging
    - regression test things that failed
    - test your documentation!


Unit test review:
- Make sure tests fail before passing
- Try to tuch the minimun amount of code as possible in your tests
- Have controll of the data you are testing. Make sure your test verifies the things you expected to work and the things you expected to break

- Always test you know exactly what are the fields being returned
- Always test each field separatelly
- Test fields return the correct data type
- Test number bounds
- Test valid options

- Test if things connect (URL - View, view_name - URL, View - serializer)
- Test valid requests (at least one for each HTTP method)
- Test invalid requests (at least one for each HTTP method)
- Test authorization for each endpoint


All tests review:
- Keep tests simple
- Keep tests fast
